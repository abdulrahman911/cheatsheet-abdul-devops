#check docker compose existing on ur machine with below command, if not then install: sudo apt install docker-compose
# docker-compose --version
## sudo apt  install docker-compose
version: "3" 
# Defines which compose version to use
services:
  # Services line define which Docker images to run. In this case, it will be MySQL server and WordPress image.
  db:
    image: mysql:5.7
    # image: mysql:5.7 indicates the MySQL database container image from Docker Hub used in this installation.
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: MyR00tMySQLPa$$5w0rD
      MYSQL_DATABASE: MyWordPressDatabaseName
      MYSQL_USER: MyWordPressUser
      MYSQL_PASSWORD: Pa$$5w0rD
      # Previous four lines define the main variables needed for the MySQL container to work: database, database username, database user password, and the MySQL root password.
  wordpress:
    depends_on:
      - db
    image: wordpress:latest
    restart: always
    # Restart line controls the restart mode, meaning if the container stops running for any reason, it will restart the process immediately.
    ports:
      - "8000:80"
      # The previous line defines the port that the WordPress container will use. After successful installation, the full path will look like this: http://localhost:8000
    environment:
      WORDPRESS_DB_HOST: db:3306
      WORDPRESS_DB_USER: MyWordPressUser
      WORDPRESS_DB_PASSWORD: Pa$$5w0rD
      WORDPRESS_DB_NAME: MyWordPressDatabaseName
# Similar to MySQL image variables, the last four lines define the main variables needed for the WordPress container to work properly with the MySQL container.
    volumes:
      ["./:/var/www/html"]
volumes:
  mysql: {}

-----------------
###The below file able to create Phpmyadmin and manage database via UI

version: "3"
services:
  db:
    image: mysql:5.7
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: MyR00tMySQLPa$$5w0rD
      MYSQL_DATABASE: MyWordPressDatabaseName
      MYSQL_USER: MyWordPressUser
      MYSQL_PASSWORD: Pa$$5w0rD
  phpmyadmin:
    image: phpmyadmin/phpmyadmin:latest
    restart: always
    environment:
      PMA_HOST: db
      PMA_USER: MyWordPressUser
      PMA_PASSWORD: Pa$$5w0rD
    ports:
      - "8087:80"
      
----------------------------
#How to Secure WordPress Installation With Docker Secrets
#Sensitive data such as passwords, SSH keys, and other types of critical information should be treated with extra care. 
#That is where Docker secrets come in. 
#Users can use Docker secrets to manage sensitive data and securely transmit it to particular containers that need access to it only.

#In this tutorial, we will use Docker secrets to mask our WORDPRESS_DB_PASSWORD variable. 
#WordPress will get the database password from a secret file we shall provide ourselves. Hereâ€™s an example:

wordpress:
   depends_on:
     - db
   image: wordpress:latest
   restart: always
   ports:
   - "8000:80"
   environment:
     WORDPRESS_DB_HOST: db:3306
     WORDPRESS_DB_USER: MyWordPressUser
     WORDPRESS_DB_PASSWORD_FILE: /run/secrets/wordpress_password
     WORDPRESS_DB_NAME: MyWordPressDatabaseName
   secrets:
     - wordpress_password   
  
secrets:
 wordpress_password:
   file: ./wordpress_password.txt
# As you can see, the WordPress database password is taken from a wordpress_password.txt file that we created in the same main directory.
